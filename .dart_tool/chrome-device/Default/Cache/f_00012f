define(['dart_sdk', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/uuid/uuid.dart', 'packages/flutter/src/widgets/widget_span.dart'], (function load__packages__audioplayers__audioplayers_dart(dart_sdk, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__services__system_channels$46dart, packages__uuid__uuid$46dart, packages__flutter__src__widgets__widget_span$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const io = dart_sdk.io;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const uuid = packages__uuid__uuid$46dart.uuid;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  var audioplayers = Object.create(dart.library);
  var $_set = dartx._set;
  var $isEmpty = dartx.isEmpty;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ReleaseModeL: () => (T.ReleaseModeL = dart.constFn(dart.legacy(audioplayers.ReleaseMode)))(),
    AudioPlayerStateL: () => (T.AudioPlayerStateL = dart.constFn(dart.legacy(audioplayers.AudioPlayerState)))(),
    PlayingRouteStateL: () => (T.PlayingRouteStateL = dart.constFn(dart.legacy(audioplayers.PlayingRouteState)))(),
    PlayerModeL: () => (T.PlayerModeL = dart.constFn(dart.legacy(audioplayers.PlayerMode)))(),
    PlayerControlCommandL: () => (T.PlayerControlCommandL = dart.constFn(dart.legacy(audioplayers.PlayerControlCommand)))(),
    StreamControllerOfAudioPlayerState: () => (T.StreamControllerOfAudioPlayerState = dart.constFn(async.StreamController$(audioplayers.AudioPlayerState)))(),
    StreamControllerOfDuration: () => (T.StreamControllerOfDuration = dart.constFn(async.StreamController$(core.Duration)))(),
    StreamControllerOfvoid: () => (T.StreamControllerOfvoid = dart.constFn(async.StreamController$(dart.void)))(),
    StreamControllerOfbool: () => (T.StreamControllerOfbool = dart.constFn(async.StreamController$(core.bool)))(),
    StreamControllerOfString: () => (T.StreamControllerOfString = dart.constFn(async.StreamController$(core.String)))(),
    StreamControllerOfPlayerControlCommand: () => (T.StreamControllerOfPlayerControlCommand = dart.constFn(async.StreamController$(audioplayers.PlayerControlCommand)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    LinkedHashMapOfString$dynamic: () => (T.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    dynamicToint: () => (T.dynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic])))(),
    JSArrayOfFuture: () => (T.JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    MethodCallToFutureOfvoid: () => (T.MethodCallToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [message_codec.MethodCall])))(),
    LinkedMapOfString$AudioPlayer: () => (T.LinkedMapOfString$AudioPlayer = dart.constFn(_js_helper.LinkedMap$(core.String, audioplayers.AudioPlayer)))(),
    AudioPlayerStateTodynamic: () => (T.AudioPlayerStateTodynamic = dart.constFn(dart.fnType(dart.dynamic, [audioplayers.AudioPlayerState])))(),
    VoidToFn: () => (T.VoidToFn = dart.constFn(dart.fnType(T.AudioPlayerStateTodynamic(), [])))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    MethodCallToFutureOfNull: () => (T.MethodCallToFutureOfNull = dart.constFn(dart.fnType(T.FutureOfNull(), [message_codec.MethodCall])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: audioplayers.ReleaseMode.prototype,
        [_name$]: "ReleaseMode.RELEASE",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: audioplayers.ReleaseMode.prototype,
        [_name$]: "ReleaseMode.LOOP",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: audioplayers.ReleaseMode.prototype,
        [_name$]: "ReleaseMode.STOP",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], T.ReleaseModeL());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: audioplayers.AudioPlayerState.prototype,
        [_name$]: "AudioPlayerState.STOPPED",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: audioplayers.AudioPlayerState.prototype,
        [_name$]: "AudioPlayerState.PLAYING",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: audioplayers.AudioPlayerState.prototype,
        [_name$]: "AudioPlayerState.PAUSED",
        index: 2
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: audioplayers.AudioPlayerState.prototype,
        [_name$]: "AudioPlayerState.COMPLETED",
        index: 3
      });
    },
    get C8() {
      return C[8] = dart.constList([C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7], T.AudioPlayerStateL());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: audioplayers.PlayingRouteState.prototype,
        [_name$]: "PlayingRouteState.SPEAKERS",
        index: 0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: audioplayers.PlayingRouteState.prototype,
        [_name$]: "PlayingRouteState.EARPIECE",
        index: 1
      });
    },
    get C11() {
      return C[11] = dart.constList([C[9] || CT.C9, C[10] || CT.C10], T.PlayingRouteStateL());
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: audioplayers.PlayerMode.prototype,
        [_name$]: "PlayerMode.MEDIA_PLAYER",
        index: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: audioplayers.PlayerMode.prototype,
        [_name$]: "PlayerMode.LOW_LATENCY",
        index: 1
      });
    },
    get C14() {
      return C[14] = dart.constList([C[12] || CT.C12, C[13] || CT.C13], T.PlayerModeL());
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: audioplayers.PlayerControlCommand.prototype,
        [_name$]: "PlayerControlCommand.NEXT_TRACK",
        index: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: audioplayers.PlayerControlCommand.prototype,
        [_name$]: "PlayerControlCommand.PREVIOUS_TRACK",
        index: 1
      });
    },
    get C17() {
      return C[17] = dart.constList([C[15] || CT.C15, C[16] || CT.C16], T.PlayerControlCommandL());
    },
    get C18() {
      return C[18] = dart.fn(audioplayers._backgroundCallbackDispatcher, T.VoidTovoid());
    },
    get C19() {
      return C[19] = dart.constMap(T.StringL(), dart.dynamic, []);
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[23] || CT.C23
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[22] || CT.C22,
        [MethodChannel_name]: "xyz.luan/audioplayers"
      });
    },
    get C24() {
      return C[24] = dart.fn(audioplayers.AudioPlayer.platformCallHandler, T.MethodCallToFutureOfvoid());
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[22] || CT.C22,
        [MethodChannel_name]: "xyz.luan/audioplayers_callback"
      });
    }
  }, false);
  var C = Array(26).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/audioplayers-0.18.3/lib/audioplayers.dart",
    "package:audioplayers/audioplayers.dart"
  ];
  var _name$ = dart.privateName(audioplayers, "_name");
  audioplayers.ReleaseMode = class ReleaseMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (audioplayers.ReleaseMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 21, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 21, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = audioplayers.ReleaseMode.prototype;
  dart.addTypeTests(audioplayers.ReleaseMode);
  dart.addTypeCaches(audioplayers.ReleaseMode);
  dart.setLibraryUri(audioplayers.ReleaseMode, I[1]);
  dart.setFieldSignature(audioplayers.ReleaseMode, () => ({
    __proto__: dart.getFields(audioplayers.ReleaseMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(audioplayers.ReleaseMode, ['toString']);
  audioplayers.ReleaseMode.RELEASE = C[0] || CT.C0;
  audioplayers.ReleaseMode.LOOP = C[1] || CT.C1;
  audioplayers.ReleaseMode.STOP = C[2] || CT.C2;
  audioplayers.ReleaseMode.values = C[3] || CT.C3;
  audioplayers.AudioPlayerState = class AudioPlayerState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (audioplayers.AudioPlayerState.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 43, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 43, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = audioplayers.AudioPlayerState.prototype;
  dart.addTypeTests(audioplayers.AudioPlayerState);
  dart.addTypeCaches(audioplayers.AudioPlayerState);
  dart.setLibraryUri(audioplayers.AudioPlayerState, I[1]);
  dart.setFieldSignature(audioplayers.AudioPlayerState, () => ({
    __proto__: dart.getFields(audioplayers.AudioPlayerState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(audioplayers.AudioPlayerState, ['toString']);
  audioplayers.AudioPlayerState.STOPPED = C[4] || CT.C4;
  audioplayers.AudioPlayerState.PLAYING = C[5] || CT.C5;
  audioplayers.AudioPlayerState.PAUSED = C[6] || CT.C6;
  audioplayers.AudioPlayerState.COMPLETED = C[7] || CT.C7;
  audioplayers.AudioPlayerState.values = C[8] || CT.C8;
  audioplayers.PlayingRouteState = class PlayingRouteState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (audioplayers.PlayingRouteState.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 58, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 58, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = audioplayers.PlayingRouteState.prototype;
  dart.addTypeTests(audioplayers.PlayingRouteState);
  dart.addTypeCaches(audioplayers.PlayingRouteState);
  dart.setLibraryUri(audioplayers.PlayingRouteState, I[1]);
  dart.setFieldSignature(audioplayers.PlayingRouteState, () => ({
    __proto__: dart.getFields(audioplayers.PlayingRouteState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(audioplayers.PlayingRouteState, ['toString']);
  audioplayers.PlayingRouteState.SPEAKERS = C[9] || CT.C9;
  audioplayers.PlayingRouteState.EARPIECE = C[10] || CT.C10;
  audioplayers.PlayingRouteState.values = C[11] || CT.C11;
  audioplayers.PlayerMode = class PlayerMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (audioplayers.PlayerMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 67, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 67, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = audioplayers.PlayerMode.prototype;
  dart.addTypeTests(audioplayers.PlayerMode);
  dart.addTypeCaches(audioplayers.PlayerMode);
  dart.setLibraryUri(audioplayers.PlayerMode, I[1]);
  dart.setFieldSignature(audioplayers.PlayerMode, () => ({
    __proto__: dart.getFields(audioplayers.PlayerMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(audioplayers.PlayerMode, ['toString']);
  audioplayers.PlayerMode.MEDIA_PLAYER = C[12] || CT.C12;
  audioplayers.PlayerMode.LOW_LATENCY = C[13] || CT.C13;
  audioplayers.PlayerMode.values = C[14] || CT.C14;
  audioplayers.PlayerControlCommand = class PlayerControlCommand extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (audioplayers.PlayerControlCommand.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 80, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 80, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = audioplayers.PlayerControlCommand.prototype;
  dart.addTypeTests(audioplayers.PlayerControlCommand);
  dart.addTypeCaches(audioplayers.PlayerControlCommand);
  dart.setLibraryUri(audioplayers.PlayerControlCommand, I[1]);
  dart.setFieldSignature(audioplayers.PlayerControlCommand, () => ({
    __proto__: dart.getFields(audioplayers.PlayerControlCommand.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(audioplayers.PlayerControlCommand, ['toString']);
  audioplayers.PlayerControlCommand.NEXT_TRACK = C[15] || CT.C15;
  audioplayers.PlayerControlCommand.PREVIOUS_TRACK = C[16] || CT.C16;
  audioplayers.PlayerControlCommand.values = C[17] || CT.C17;
  var playerId$ = dart.privateName(audioplayers, "AudioPlayer.playerId");
  var mode$ = dart.privateName(audioplayers, "AudioPlayer.mode");
  var _playerStateController = dart.privateName(audioplayers, "_playerStateController");
  var _notificationPlayerStateController = dart.privateName(audioplayers, "_notificationPlayerStateController");
  var _positionController = dart.privateName(audioplayers, "_positionController");
  var _durationController = dart.privateName(audioplayers, "_durationController");
  var _completionController = dart.privateName(audioplayers, "_completionController");
  var _seekCompleteController = dart.privateName(audioplayers, "_seekCompleteController");
  var _errorController = dart.privateName(audioplayers, "_errorController");
  var _commandController = dart.privateName(audioplayers, "_commandController");
  var _playingRouteState = dart.privateName(audioplayers, "_playingRouteState");
  var _audioPlayerState = dart.privateName(audioplayers, "_audioPlayerState");
  var _invokeMethod = dart.privateName(audioplayers, "_invokeMethod");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  audioplayers.AudioPlayer = class AudioPlayer extends core.Object {
    get playerId() {
      return this[playerId$];
    }
    set playerId(value) {
      this[playerId$] = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      this[mode$] = value;
    }
    get state() {
      return this[_audioPlayerState];
    }
    set state(state) {
      if (state == null) dart.nullFailed(I[0], 189, 30, "state");
      this[_playerStateController].add(state);
      this[_audioPlayerState] = state;
    }
    set playingRouteState(routeState) {
      if (routeState == null) dart.nullFailed(I[0], 194, 43, "routeState");
      this[_playingRouteState] = routeState;
    }
    set notificationState(state) {
      if (state == null) dart.nullFailed(I[0], 198, 42, "state");
      this[_notificationPlayerStateController].add(state);
      this[_audioPlayerState] = state;
    }
    get onPlayerStateChanged() {
      return this[_playerStateController].stream;
    }
    get onNotificationPlayerStateChanged() {
      return this[_notificationPlayerStateController].stream;
    }
    get onAudioPositionChanged() {
      return this[_positionController].stream;
    }
    get onDurationChanged() {
      return this[_durationController].stream;
    }
    get onPlayerCompletion() {
      return this[_completionController].stream;
    }
    get onSeekComplete() {
      return this[_seekCompleteController].stream;
    }
    get onPlayerError() {
      return this[_errorController].stream;
    }
    get onPlayerCommand() {
      return this[_commandController].stream;
    }
    [_invokeMethod](method, $arguments = C[19] || CT.C19) {
      let t0;
      if (method == null) dart.nullFailed(I[0], 276, 12, "method");
      if ($arguments == null) dart.nullFailed(I[0], 277, 26, "arguments");
      let withPlayerId = (t0 = T.LinkedHashMapOfString$dynamic().of($arguments), (() => {
        t0[$_set]("playerId", this.playerId);
        t0[$_set]("mode", dart.toString(this.mode));
        return t0;
      })());
      return audioplayers.AudioPlayer._channel.invokeMethod(dart.dynamic, method, withPlayerId).then(core.int, dart.fn(result => core.int.as(result), T.dynamicToint()));
    }
    startHeadlessService() {
      let t0;
      if (this.playerId[$isEmpty]) {
        return;
      }
      let handle = ui.PluginUtilities.getCallbackHandle(C[18] || CT.C18);
      if (!(handle != null)) dart.assertFailed("Unable to lookup callback.", I[0], 299, 12, "handle != null");
      this[_invokeMethod]("startHeadlessService", new (T.IdentityMapOfString$dynamic()).from(["handleKey", [(t0 = handle, t0 == null ? null : t0.toRawHandle())]]));
      return;
    }
    monitorNotificationStateChanges(callback) {
      if (callback == null) dart.nullFailed(I[0], 312, 43, "callback");
      return async.async(core.bool, (function* monitorNotificationStateChanges() {
        let t0;
        let handle = ui.PluginUtilities.getCallbackHandle(callback);
        if (!(handle != null)) dart.assertFailed("Unable to lookup callback.", I[0], 315, 12, "handle != null");
        yield this[_invokeMethod]("monitorNotificationStateChanges", new (T.IdentityMapOfString$dynamic()).from(["handleMonitorKey", [(t0 = handle, t0 == null ? null : t0.toRawHandle())]]));
        return true;
      }).bind(this));
    }
    play(url, opts) {
      if (url == null) dart.nullFailed(I[0], 330, 12, "url");
      let isLocal = opts && 'isLocal' in opts ? opts.isLocal : null;
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      if (volume == null) dart.nullFailed(I[0], 332, 12, "volume");
      let position = opts && 'position' in opts ? opts.position : null;
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      if (respectSilence == null) dart.nullFailed(I[0], 335, 10, "respectSilence");
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      if (stayAwake == null) dart.nullFailed(I[0], 336, 10, "stayAwake");
      let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : false;
      if (duckAudio == null) dart.nullFailed(I[0], 337, 10, "duckAudio");
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      if (recordingActive == null) dart.nullFailed(I[0], 338, 10, "recordingActive");
      return async.async(core.int, (function* play() {
        let t0;
        isLocal == null ? isLocal = this.isLocalUrl(url) : null;
        let result = (yield this[_invokeMethod]("play", new (T.IdentityMapOfString$dynamic()).from(["url", url, "isLocal", isLocal, "volume", volume, "position", (t0 = position, t0 == null ? null : t0.inMilliseconds), "respectSilence", respectSilence, "stayAwake", stayAwake, "duckAudio", duckAudio, "recordingActive", recordingActive])));
        if (result === 1) {
          this.state = audioplayers.AudioPlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    playBytes(bytes, opts) {
      if (bytes == null) dart.nullFailed(I[0], 364, 15, "bytes");
      let volume = opts && 'volume' in opts ? opts.volume : 1;
      if (volume == null) dart.nullFailed(I[0], 365, 12, "volume");
      let position = opts && 'position' in opts ? opts.position : null;
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      if (respectSilence == null) dart.nullFailed(I[0], 368, 10, "respectSilence");
      let stayAwake = opts && 'stayAwake' in opts ? opts.stayAwake : false;
      if (stayAwake == null) dart.nullFailed(I[0], 369, 10, "stayAwake");
      let duckAudio = opts && 'duckAudio' in opts ? opts.duckAudio : false;
      if (duckAudio == null) dart.nullFailed(I[0], 370, 10, "duckAudio");
      let recordingActive = opts && 'recordingActive' in opts ? opts.recordingActive : false;
      if (recordingActive == null) dart.nullFailed(I[0], 371, 10, "recordingActive");
      return async.async(core.int, (function* playBytes() {
        let t0;
        if (!dart.test(io.Platform.isAndroid)) {
          dart.throw(new message_codec.PlatformException.new({code: "Not supported", message: "Only Android is currently supported"}));
        }
        let result = (yield this[_invokeMethod]("playBytes", new (T.IdentityMapOfString$dynamic()).from(["bytes", bytes, "volume", volume, "position", (t0 = position, t0 == null ? null : t0.inMilliseconds), "respectSilence", respectSilence, "stayAwake", stayAwake, "duckAudio", duckAudio, "recordingActive", recordingActive])));
        if (result === 1) {
          this.state = audioplayers.AudioPlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    pause() {
      return async.async(core.int, (function* pause() {
        let result = (yield this[_invokeMethod]("pause"));
        if (result === 1) {
          this.state = audioplayers.AudioPlayerState.PAUSED;
        }
        return result;
      }).bind(this));
    }
    stop() {
      return async.async(core.int, (function* stop() {
        let result = (yield this[_invokeMethod]("stop"));
        if (result === 1) {
          this.state = audioplayers.AudioPlayerState.STOPPED;
        }
        return result;
      }).bind(this));
    }
    resume() {
      return async.async(core.int, (function* resume() {
        let result = (yield this[_invokeMethod]("resume"));
        if (result === 1) {
          this.state = audioplayers.AudioPlayerState.PLAYING;
        }
        return result;
      }).bind(this));
    }
    release() {
      return async.async(core.int, (function* release() {
        let result = (yield this[_invokeMethod]("release"));
        if (result === 1) {
          this.state = audioplayers.AudioPlayerState.STOPPED;
        }
        return result;
      }).bind(this));
    }
    seek(position) {
      if (position == null) dart.nullFailed(I[0], 452, 29, "position");
      this[_positionController].add(position);
      return this[_invokeMethod]("seek", new (T.IdentityMapOfString$dynamic()).from(["position", position.inMilliseconds]));
    }
    setVolume(volume) {
      if (volume == null) dart.nullFailed(I[0], 461, 32, "volume");
      return this[_invokeMethod]("setVolume", new (T.IdentityMapOfString$dynamic()).from(["volume", volume]));
    }
    setReleaseMode(releaseMode) {
      if (releaseMode == null) dart.nullFailed(I[0], 468, 42, "releaseMode");
      return this[_invokeMethod]("setReleaseMode", new (T.IdentityMapOfString$dynamic()).from(["releaseMode", dart.toString(releaseMode)]));
    }
    setPlaybackRate(opts) {
      let playbackRate = opts && 'playbackRate' in opts ? opts.playbackRate : 1;
      if (playbackRate == null) dart.nullFailed(I[0], 480, 39, "playbackRate");
      return this[_invokeMethod]("setPlaybackRate", new (T.IdentityMapOfString$dynamic()).from(["playbackRate", playbackRate]));
    }
    setNotification(opts) {
      let title = opts && 'title' in opts ? opts.title : "";
      if (title == null) dart.nullFailed(I[0], 488, 12, "title");
      let albumTitle = opts && 'albumTitle' in opts ? opts.albumTitle : "";
      if (albumTitle == null) dart.nullFailed(I[0], 489, 12, "albumTitle");
      let artist = opts && 'artist' in opts ? opts.artist : "";
      if (artist == null) dart.nullFailed(I[0], 490, 12, "artist");
      let imageUrl = opts && 'imageUrl' in opts ? opts.imageUrl : "";
      if (imageUrl == null) dart.nullFailed(I[0], 491, 12, "imageUrl");
      let forwardSkipInterval = opts && 'forwardSkipInterval' in opts ? opts.forwardSkipInterval : C[20] || CT.C20;
      if (forwardSkipInterval == null) dart.nullFailed(I[0], 492, 14, "forwardSkipInterval");
      let backwardSkipInterval = opts && 'backwardSkipInterval' in opts ? opts.backwardSkipInterval : C[20] || CT.C20;
      if (backwardSkipInterval == null) dart.nullFailed(I[0], 493, 14, "backwardSkipInterval");
      let duration = opts && 'duration' in opts ? opts.duration : C[20] || CT.C20;
      if (duration == null) dart.nullFailed(I[0], 494, 14, "duration");
      let elapsedTime = opts && 'elapsedTime' in opts ? opts.elapsedTime : C[20] || CT.C20;
      if (elapsedTime == null) dart.nullFailed(I[0], 495, 14, "elapsedTime");
      let hasPreviousTrack = opts && 'hasPreviousTrack' in opts ? opts.hasPreviousTrack : false;
      if (hasPreviousTrack == null) dart.nullFailed(I[0], 496, 10, "hasPreviousTrack");
      let hasNextTrack = opts && 'hasNextTrack' in opts ? opts.hasNextTrack : false;
      if (hasNextTrack == null) dart.nullFailed(I[0], 497, 10, "hasNextTrack");
      return this[_invokeMethod]("setNotification", new (T.IdentityMapOfString$dynamic()).from(["title", title, "albumTitle", albumTitle, "artist", artist, "imageUrl", imageUrl, "forwardSkipInterval", forwardSkipInterval.inSeconds, "backwardSkipInterval", backwardSkipInterval.inSeconds, "duration", duration.inSeconds, "elapsedTime", elapsedTime.inSeconds, "hasPreviousTrack", hasPreviousTrack, "hasNextTrack", hasNextTrack]));
    }
    setUrl(url, opts) {
      if (url == null) dart.nullFailed(I[0], 522, 12, "url");
      let isLocal = opts && 'isLocal' in opts ? opts.isLocal : false;
      if (isLocal == null) dart.nullFailed(I[0], 523, 10, "isLocal");
      let respectSilence = opts && 'respectSilence' in opts ? opts.respectSilence : false;
      if (respectSilence == null) dart.nullFailed(I[0], 524, 10, "respectSilence");
      isLocal = this.isLocalUrl(url);
      return this[_invokeMethod]("setUrl", new (T.IdentityMapOfString$dynamic()).from(["url", url, "isLocal", isLocal, "respectSilence", respectSilence]));
    }
    getDuration() {
      return this[_invokeMethod]("getDuration");
    }
    getCurrentPosition() {
      return async.async(core.int, (function* getCurrentPosition() {
        return this[_invokeMethod]("getCurrentPosition");
      }).bind(this));
    }
    static platformCallHandler(call) {
      if (call == null) dart.nullFailed(I[0], 547, 54, "call");
      return async.async(dart.void, function* platformCallHandler() {
        try {
          audioplayers.AudioPlayer._doHandlePlatformCall(call);
        } catch (e) {
          let ex = dart.getThrown(e);
          if (core.Object.is(ex)) {
            audioplayers.AudioPlayer._log("Unexpected error: " + dart.str(ex));
          } else
            throw e;
        }
      });
    }
    static _doHandlePlatformCall(call) {
      if (call == null) dart.nullFailed(I[0], 555, 56, "call");
      return async.async(dart.void, function* _doHandlePlatformCall() {
        let callArgs = core.Map.as(call.arguments);
        audioplayers.AudioPlayer._log("_platformCallHandler call " + dart.str(call.method) + " " + dart.str(callArgs));
        let playerId = core.String.as(callArgs[$_get]("playerId"));
        let player = audioplayers.AudioPlayer.players[$_get](playerId);
        if (!false && dart.test(io.Platform.isAndroid) && player == null) {
          let oldPlayer = new audioplayers.AudioPlayer.new({playerId: playerId});
          yield oldPlayer.release();
          oldPlayer.dispose();
          audioplayers.AudioPlayer.players[$remove](playerId);
          return;
        }
        if (player == null) return;
        let value = callArgs[$_get]("value");
        switch (call.method) {
          case "audio.onNotificationPlayerStateChanged":
          {
            let isPlaying = core.bool.as(value);
            player.notificationState = dart.test(isPlaying) ? audioplayers.AudioPlayerState.PLAYING : audioplayers.AudioPlayerState.PAUSED;
            break;
          }
          case "audio.onDuration":
          {
            let newDuration = new core.Duration.new({milliseconds: core.int.as(value)});
            player[_durationController].add(newDuration);
            break;
          }
          case "audio.onCurrentPosition":
          {
            let newDuration = new core.Duration.new({milliseconds: core.int.as(value)});
            player[_positionController].add(newDuration);
            break;
          }
          case "audio.onComplete":
          {
            player.state = audioplayers.AudioPlayerState.COMPLETED;
            player[_completionController].add(null);
            break;
          }
          case "audio.onSeekComplete":
          {
            player[_seekCompleteController].add(core.bool.as(value));
            break;
          }
          case "audio.onError":
          {
            player.state = audioplayers.AudioPlayerState.STOPPED;
            player[_errorController].add(core.String.as(value));
            break;
          }
          case "audio.onGotNextTrackCommand":
          {
            player[_commandController].add(audioplayers.PlayerControlCommand.NEXT_TRACK);
            break;
          }
          case "audio.onGotPreviousTrackCommand":
          {
            player[_commandController].add(audioplayers.PlayerControlCommand.PREVIOUS_TRACK);
            break;
          }
          default:
          {
            audioplayers.AudioPlayer._log("Unknown method " + dart.str(call.method) + " ");
          }
        }
      });
    }
    static _log(param) {
      if (param == null) dart.nullFailed(I[0], 609, 27, "param");
      if (dart.test(audioplayers.AudioPlayer.logEnabled)) {
        core.print(param);
      }
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        yield this.release();
        let futures = T.JSArrayOfFuture().of([]);
        if (!dart.test(this[_playerStateController].isClosed)) futures[$add](this[_playerStateController].close());
        if (!dart.test(this[_notificationPlayerStateController].isClosed)) futures[$add](this[_notificationPlayerStateController].close());
        if (!dart.test(this[_positionController].isClosed)) futures[$add](this[_positionController].close());
        if (!dart.test(this[_durationController].isClosed)) futures[$add](this[_durationController].close());
        if (!dart.test(this[_completionController].isClosed)) futures[$add](this[_completionController].close());
        if (!dart.test(this[_seekCompleteController].isClosed)) futures[$add](this[_seekCompleteController].close());
        if (!dart.test(this[_errorController].isClosed)) futures[$add](this[_errorController].close());
        if (!dart.test(this[_commandController].isClosed)) futures[$add](this[_commandController].close());
        yield async.Future.wait(dart.dynamic, futures);
        audioplayers.AudioPlayer.players[$remove](this.playerId);
      }).bind(this));
    }
    earpieceOrSpeakersToggle() {
      return async.async(core.int, (function* earpieceOrSpeakersToggle() {
        let playingRoute = this[_playingRouteState] == audioplayers.PlayingRouteState.EARPIECE ? audioplayers.PlayingRouteState.SPEAKERS : audioplayers.PlayingRouteState.EARPIECE;
        let playingRouteName = playingRoute == audioplayers.PlayingRouteState.EARPIECE ? "earpiece" : "speakers";
        let result = (yield this[_invokeMethod]("earpieceOrSpeakersToggle", new (T.IdentityMapOfString$dynamic()).from(["playingRoute", playingRouteName])));
        if (result === 1) {
          this.playingRouteState = playingRoute;
        }
        return result;
      }).bind(this));
    }
    isLocalUrl(url) {
      if (url == null) dart.nullFailed(I[0], 662, 26, "url");
      return url[$startsWith]("/") || url[$startsWith]("file://") || url[$substring](1)[$startsWith](":\\");
    }
  };
  (audioplayers.AudioPlayer.new = function(opts) {
    let t0;
    let mode = opts && 'mode' in opts ? opts.mode : C[12] || CT.C12;
    if (mode == null) dart.nullFailed(I[0], 258, 21, "mode");
    let playerId = opts && 'playerId' in opts ? opts.playerId : "";
    if (playerId == null) dart.nullFailed(I[0], 258, 58, "playerId");
    this[_playerStateController] = T.StreamControllerOfAudioPlayerState().broadcast();
    this[_notificationPlayerStateController] = T.StreamControllerOfAudioPlayerState().broadcast();
    this[_positionController] = T.StreamControllerOfDuration().broadcast();
    this[_durationController] = T.StreamControllerOfDuration().broadcast();
    this[_completionController] = T.StreamControllerOfvoid().broadcast();
    this[_seekCompleteController] = T.StreamControllerOfbool().broadcast();
    this[_errorController] = T.StreamControllerOfString().broadcast();
    this[_commandController] = T.StreamControllerOfPlayerControlCommand().broadcast();
    this[_playingRouteState] = audioplayers.PlayingRouteState.SPEAKERS;
    this[_audioPlayerState] = audioplayers.AudioPlayerState.STOPPED;
    this[mode$] = mode;
    this[playerId$] = playerId;
    this.playerId = this.playerId === "" ? audioplayers.AudioPlayer._uuid.v4() : this.playerId;
    audioplayers.AudioPlayer.players[$_set](this.playerId, this);
    if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
      let handle = ui.PluginUtilities.getCallbackHandle(C[18] || CT.C18);
      if (!(handle != null)) dart.assertFailed("Unable to lookup callback.", I[0], 268, 14, "handle != null");
      this[_invokeMethod]("startHeadlessService", new (T.IdentityMapOfString$dynamic()).from(["handleKey", [(t0 = handle, t0 == null ? null : t0.toRawHandle())]]));
    }
  }).prototype = audioplayers.AudioPlayer.prototype;
  dart.addTypeTests(audioplayers.AudioPlayer);
  dart.addTypeCaches(audioplayers.AudioPlayer);
  dart.setMethodSignature(audioplayers.AudioPlayer, () => ({
    __proto__: dart.getMethods(audioplayers.AudioPlayer.__proto__),
    [_invokeMethod]: dart.fnType(async.Future$(core.int), [core.String], [core.Map$(core.String, dart.dynamic)]),
    startHeadlessService: dart.fnType(dart.void, []),
    monitorNotificationStateChanges: dart.fnType(async.Future$(core.bool), [dart.fnType(dart.void, [audioplayers.AudioPlayerState])]),
    play: dart.fnType(async.Future$(core.int), [core.String], {duckAudio: core.bool, isLocal: dart.nullable(core.bool), position: dart.nullable(core.Duration), recordingActive: core.bool, respectSilence: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    playBytes: dart.fnType(async.Future$(core.int), [typed_data.Uint8List], {duckAudio: core.bool, position: dart.nullable(core.Duration), recordingActive: core.bool, respectSilence: core.bool, stayAwake: core.bool, volume: core.double}, {}),
    pause: dart.fnType(async.Future$(core.int), []),
    stop: dart.fnType(async.Future$(core.int), []),
    resume: dart.fnType(async.Future$(core.int), []),
    release: dart.fnType(async.Future$(core.int), []),
    seek: dart.fnType(async.Future$(core.int), [core.Duration]),
    setVolume: dart.fnType(async.Future$(core.int), [core.double]),
    setReleaseMode: dart.fnType(async.Future$(core.int), [audioplayers.ReleaseMode]),
    setPlaybackRate: dart.fnType(async.Future$(core.int), [], {playbackRate: core.double}, {}),
    setNotification: dart.fnType(async.Future, [], {albumTitle: core.String, artist: core.String, backwardSkipInterval: core.Duration, duration: core.Duration, elapsedTime: core.Duration, forwardSkipInterval: core.Duration, hasNextTrack: core.bool, hasPreviousTrack: core.bool, imageUrl: core.String, title: core.String}, {}),
    setUrl: dart.fnType(async.Future$(core.int), [core.String], {isLocal: core.bool, respectSilence: core.bool}, {}),
    getDuration: dart.fnType(async.Future$(core.int), []),
    getCurrentPosition: dart.fnType(async.Future$(core.int), []),
    dispose: dart.fnType(async.Future$(dart.void), []),
    earpieceOrSpeakersToggle: dart.fnType(async.Future$(core.int), []),
    isLocalUrl: dart.fnType(core.bool, [core.String])
  }));
  dart.setGetterSignature(audioplayers.AudioPlayer, () => ({
    __proto__: dart.getGetters(audioplayers.AudioPlayer.__proto__),
    state: audioplayers.AudioPlayerState,
    onPlayerStateChanged: async.Stream$(audioplayers.AudioPlayerState),
    onNotificationPlayerStateChanged: async.Stream$(audioplayers.AudioPlayerState),
    onAudioPositionChanged: async.Stream$(core.Duration),
    onDurationChanged: async.Stream$(core.Duration),
    onPlayerCompletion: async.Stream$(dart.void),
    onSeekComplete: async.Stream$(dart.void),
    onPlayerError: async.Stream$(core.String),
    onPlayerCommand: async.Stream$(audioplayers.PlayerControlCommand)
  }));
  dart.setSetterSignature(audioplayers.AudioPlayer, () => ({
    __proto__: dart.getSetters(audioplayers.AudioPlayer.__proto__),
    state: audioplayers.AudioPlayerState,
    playingRouteState: audioplayers.PlayingRouteState,
    notificationState: audioplayers.AudioPlayerState
  }));
  dart.setLibraryUri(audioplayers.AudioPlayer, I[1]);
  dart.setFieldSignature(audioplayers.AudioPlayer, () => ({
    __proto__: dart.getFields(audioplayers.AudioPlayer.__proto__),
    [_playerStateController]: dart.finalFieldType(async.StreamController$(audioplayers.AudioPlayerState)),
    [_notificationPlayerStateController]: dart.finalFieldType(async.StreamController$(audioplayers.AudioPlayerState)),
    [_positionController]: dart.finalFieldType(async.StreamController$(core.Duration)),
    [_durationController]: dart.finalFieldType(async.StreamController$(core.Duration)),
    [_completionController]: dart.finalFieldType(async.StreamController$(dart.void)),
    [_seekCompleteController]: dart.finalFieldType(async.StreamController$(core.bool)),
    [_errorController]: dart.finalFieldType(async.StreamController$(core.String)),
    [_commandController]: dart.finalFieldType(async.StreamController$(audioplayers.PlayerControlCommand)),
    [_playingRouteState]: dart.fieldType(audioplayers.PlayingRouteState),
    [_audioPlayerState]: dart.fieldType(audioplayers.AudioPlayerState),
    playerId: dart.fieldType(core.String),
    mode: dart.fieldType(audioplayers.PlayerMode)
  }));
  dart.defineLazy(audioplayers.AudioPlayer, {
    /*audioplayers.AudioPlayer._channel*/get _channel() {
      let t1;
      return t1 = C[21] || CT.C21, (() => {
        t1.setMethodCallHandler(C[24] || CT.C24);
        return t1;
      })();
    },
    /*audioplayers.AudioPlayer._uuid*/get _uuid() {
      return new uuid.Uuid.new();
    },
    /*audioplayers.AudioPlayer.players*/get players() {
      return new (T.LinkedMapOfString$AudioPlayer()).new();
    },
    /*audioplayers.AudioPlayer.logEnabled*/get logEnabled() {
      return false;
    },
    set logEnabled(_) {}
  }, false);
  audioplayers._backgroundCallbackDispatcher = function _backgroundCallbackDispatcher() {
    let _channel = C[25] || CT.C25;
    binding.WidgetsFlutterBinding.ensureInitialized();
    let onAudioChangeBackgroundEvent = null;
    _channel.setMethodCallHandler(dart.fn(call => {
      if (call == null) dart.nullFailed(I[0], 104, 45, "call");
      return async.async(core.Null, function*() {
        function _performCallbackLookup() {
          let handle = new ui.CallbackHandle.fromRawHandle(core.int.as(dart.dsend(call.arguments, '_get', ["updateHandleMonitorKey"])));
          let closure = ui.PluginUtilities.getCallbackFromHandle(handle);
          if (closure == null) {
            core.print("Fatal Error: Callback lookup failed!");
          }
          return T.AudioPlayerStateTodynamic().as(closure);
        }
        dart.fn(_performCallbackLookup, T.VoidToFn());
        let callArgs = core.Map.as(call.arguments);
        if (call.method === "audio.onNotificationBackgroundPlayerStateChanged") {
          onAudioChangeBackgroundEvent == null ? onAudioChangeBackgroundEvent = _performCallbackLookup() : null;
          let playerState = core.String.as(callArgs[$_get]("value"));
          if (playerState === "playing") {
            dart.nullCheck(onAudioChangeBackgroundEvent)(audioplayers.AudioPlayerState.PLAYING);
          } else if (playerState === "paused") {
            dart.nullCheck(onAudioChangeBackgroundEvent)(audioplayers.AudioPlayerState.PAUSED);
          } else if (playerState === "completed") {
            dart.nullCheck(onAudioChangeBackgroundEvent)(audioplayers.AudioPlayerState.COMPLETED);
          }
        } else {
          if (!false) dart.assertFailed("No handler defined for method type: '" + dart.str(call.method) + "'", I[0], 132, 14, "false");
        }
      });
    }, T.MethodCallToFutureOfNull()));
  };
  dart.trackLibraries("packages/audioplayers/audioplayers.dart", {
    "package:audioplayers/audioplayers.dart": audioplayers
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["audioplayers.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/audioplayers/audioplayers.dart.lib.js"}');
  // Exports:
  return {
    audioplayers: audioplayers
  };
}));

//# sourceMappingURL=audioplayers.dart.lib.js.map
